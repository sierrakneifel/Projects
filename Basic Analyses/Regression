{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO3j5a4zOkF/6nmC7TmpEnh",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sierrakneifel/Projects/blob/main/IN502_Week_5.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Regression with Categorical Predictors"
      ],
      "metadata": {
        "id": "opMoRcw2nmoq"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "f5keHjSyne41"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import statsmodels.formula.api as sms\n",
        "import statsmodels.api as sm\n",
        "from sklearn.preprocessing import LabelBinarizer # Import the necessary modules\n",
        "\n",
        "nba = pd.read_csv(\"nbaallelo_mlr.csv\") # Code to read in nbaallelo_mlr.csv\n",
        "\n",
        "#nba1 = nba.copy()\n",
        "#label_binarizer = LabelBinarizer()\n",
        "#label_binarizer_output = label_binarizer.fit_transform(nba1['game_result'])\n",
        "#result_df = pd.DataFrame(label_binarizer_output, columns = label_binarizer.classes_)\n",
        "#print(result_df)\n",
        "\n",
        "#win = pd.get_dummies(nba, columns = ['game_result']) (# Recode the column game_result into a dummy variable, win, with W = 1 and L = 0\n",
        "win = pd.get_dummies(nba)\n",
        "\n",
        "# Perform multiple linear regression with pts as the response variable and elo_i, win, and opp_pts\n",
        "# in that order, as the predictor variables\n",
        "results = sms.ols('pts ~ elo_i+game_result_W+opp_pts', data = win).fit() # Code to perform multiple regression using statsmodels ols\n",
        "\n",
        "# Create an analysis of variance table\n",
        "aov_table = sm.stats.anova_lm(results, typ=2) #Code to create ANOVA table\n",
        "\n",
        "# Print the analysis of variance table\n",
        "print(aov_table)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Regression with Nonlinear Relationships"
      ],
      "metadata": {
        "id": "8w-BYKQWnsvS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import statsmodels.formula.api as sms\n",
        "import statsmodels.api as sm # Import the necessary modules\n",
        "\n",
        "cars = pd.read_csv(\"mtcars.csv\") # Code to read in mtcars.csv\n",
        "\n",
        "cars[\"exp_wt\"] = np.exp(cars['wt'])**-1\n",
        "#cars[\"exp_wt\"] = cars['wt'] # Create a new column in the data frame called exp_wt which is the negative exponentiation of the column wt\n",
        "\n",
        "# Perform multiple linear regression with mpg as the response variable and wt and exp_wt\n",
        "# in that order, as the predictor variables\n",
        "results = sms.ols('mpg ~ wt + exp_wt', cars). fit() # Code to perform multiple regression using statsmodels ols\n",
        "\n",
        "# Create an analysis of variance table\n",
        "aov_table = sm.stats.anova_lm(results, typ=2) # Code to create ANOVA table\n",
        "\n",
        "# Print the analysis of variance table\n",
        "print(aov_table)"
      ],
      "metadata": {
        "id": "wunMGFXJnyJq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Multiple Regression"
      ],
      "metadata": {
        "id": "QUKSEjlRn0Fb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import statsmodels.formula.api as smf\n",
        "import statsmodels.api as sm # Import the necessary modules\n",
        "\n",
        "nba = pd.read_csv(\"nbaallelo_slr.csv\") # Code to read in nbaallelo_slr.csv\n",
        "\n",
        "\n",
        "# Perform multiple linear regression on pts, elo_i, and opp_pts\n",
        "results = smf.ols('pts ~ elo_i + opp_pts', nba).fit() # Code to perform multiple regression using statsmodels ols\n",
        "\n",
        "# Create an analysis of variance table\n",
        "aov_table = sm.stats.anova_lm(results, typ=2) # Code to create ANOVA table\n",
        "\n",
        "# Print the analysis of variance table\n",
        "print(aov_table)"
      ],
      "metadata": {
        "id": "gfX49mT-n2p5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Logistic Regression using Logit()  "
      ],
      "metadata": {
        "id": "GwJ3SPGWn5FN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression # import the necessary libraries\n",
        "\n",
        "# load nbaallelo_log.csv into a dataframe\n",
        "df = pd.read_csv(\"nbaallelo_log.csv\") # code to load csv file\n",
        "\n",
        "# Converts the feature \"game_result\" to a binary feature and adds as new column \"wins\"\n",
        "wins = df.game_result == \"W\"\n",
        "bool_val = np.multiply(wins, 1)\n",
        "wins = pd.DataFrame(bool_val, columns = [\"game_result\"])\n",
        "wins_new = wins.rename(columns = {\"game_result\": \"wins\"})\n",
        "df_final = pd.concat([df, wins_new], axis=1)\n",
        "\n",
        "# split the data df_final into training and test sets with a test size of 0.3 and random_state = 0\n",
        "train, test = train_test_split(df_final, test_size = 0.3, random_state = 0)  # code to split df_final into training and test sets\n",
        "\n",
        "# construct a logistic model with wins and the target and elo_i as the predictor, using the training set\n",
        "lm = smf.logit(formula = 'wins ~ elo_i', data = train). fit() #code to construct logistic model using the logit function\n",
        "\n",
        "# print coefficients for the model\n",
        "print(lm.params)\n"
      ],
      "metadata": {
        "id": "s9QIXH2dn9Bb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Evaluating Logistic Regression"
      ],
      "metadata": {
        "id": "nx48ioA-oDE3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import statsmodels.formula.api as smf\n",
        "from sklearn import metrics\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import confusion_matrix # import the necessary libraries\n",
        "\n",
        "# load nbaallelo_log.csv into a dataframe\n",
        "df = pd.read_csv(\"nbaallelo_log.csv\") # code to load csv file\n",
        "\n",
        "# Converts the feature \"game_result\" to a binary feature and adds as new column \"wins\"\n",
        "wins = df.game_result == \"W\"\n",
        "bool_val = np.multiply(wins, 1)\n",
        "wins = pd.DataFrame(bool_val, columns = [\"game_result\"])\n",
        "wins_new = wins.rename(columns = {\"game_result\": \"wins\"})\n",
        "df_final = pd.concat([df, wins_new], axis=1)\n",
        "\n",
        "# split the data df_final into training and test sets with a test size of 0.3 and random_state = 0\n",
        "train, test = train_test_split(df_final, test_size = 0.3, random_state = 0) #code to split df_final into training and test sets\n",
        "\n",
        "# build the logistic model using the LogisticRegression function with wins as the target variable and elo_i as the predictor.\n",
        "#lm = smf.logit(formula = 'wins ~ elo_i', data = train).fit()\n",
        "logisticRegr = LogisticRegression()\n",
        "logisticRegr.fit(train[['elo_i']], np.ravel(train[['wins']]))\n",
        "\n",
        "# use the test set to predict the wins from the elo_i score\n",
        "predictions = logisticRegr.predict(test[['elo_i']]) # code to predict wins\n",
        "\n",
        "# generate confusion matrix\n",
        "conf = metrics.confusion_matrix(test[['wins']], predictions) # code to generate confusion matrix\n",
        "\n",
        "print(\"confusion matrix is \\n\", conf)\n",
        "\n",
        "# calculate the sensitivity\n",
        "sens = conf[0,0]/(conf[0,0]+conf[0,1])# code to calculate the sensitivity\n",
        "print(f'Sensitivity is {sens:.6f}')\n",
        "\n",
        "# calculate the specificity\n",
        "spec = conf[1,1]/(conf[1,0]+conf[1,1])# code to calculate the specificity\n",
        "print (f'Specificity is {spec:.6f}')\n"
      ],
      "metadata": {
        "id": "XLYlmsQ-oIFA"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
