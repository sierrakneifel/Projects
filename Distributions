{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP3r9Aijbf5ZoagIar9JyCk",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sierrakneifel/Projects/blob/main/IN502_Week_2.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Poisson Distribution"
      ],
      "metadata": {
        "id": "DbpV_3qxkjTo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import scipy.stats as st\n",
        "from scipy.stats import poisson # import the correct module and function\n",
        "\n",
        "x = int(input())\n",
        "lam = int(input())\n",
        "\n",
        "np.random.seed(seed=123)\n",
        "\n",
        "# Generate 8 random numbers with a Poisson distribution with a mean of lam\n",
        "r1 = poisson.rvs(lam, size=8) # Code for generating distribution\n",
        "\n",
        "# Generate 20 random numbers with a Poisson distribution with a mean of lam\n",
        "r2 = poisson.rvs(lam, size=20) # Code for generating distribution\n",
        "\n",
        "# Generate 100 random numbers with a Poisson distribution with a mean of lam\n",
        "r3 = poisson.rvs(lam, size=100) # Code for generating distribution\n",
        "\n",
        "# Calculate the cumulative probability of x or fewer successes for a Poisson distribution with a mean of lam\n",
        "cp = poisson.cdf(x, lam) # Code for cumulative probability\n",
        "print(\"Cumulative probability is \", cp)\n",
        "\n",
        "# Calculate the theoretical mean of the Poisson distribution\n",
        "mean_theor = poisson.stats(lam, moments='m') # Code for theoretical mean\n",
        "print(\"Theoretical mean is \", mean_theor)\n",
        "\n",
        "# Calculate the actual mean of r1, r2, and r3\n",
        "mean_r1 = r1.mean() # Code for actual mean of r1\n",
        "print(\"Mean of r1 is \", mean_r1)\n",
        "\n",
        "mean_r2 = r2.mean() # Code for actual mean of r2\n",
        "print(\"Mean of r2 is \", mean_r2)\n",
        "\n",
        "mean_r3 = r3.mean() # Code for actual mean of r3\n",
        "print(\"Mean of r3 is \", mean_r3)\n"
      ],
      "metadata": {
        "id": "RQe9I0xckcy6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Normal Distribution"
      ],
      "metadata": {
        "id": "jqGTwpE4kq6N"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#import scipy.stats\n",
        "import scipy.stats as st\n",
        "\n",
        "#input two IQs, making sure that IQ1 is less than IQ2\n",
        "IQ1 = float(input())\n",
        "IQ2 = float(input())\n",
        "\n",
        "while IQ1 > IQ2:\n",
        "    print(\"IQ1 should be less than IQ2. Enter numbers again.\")\n",
        "    IQ1 = float(input())\n",
        "    IQ2 = float(input())\n",
        "\n",
        "prob_al = st.norm.sf(IQ1, 100, 15) #write a command that calculates the probability that a randomly\n",
        "          #selected person has is greater than or equal to IQ1.\n",
        "prob_am = st.norm.cdf(IQ1, 100, 15)  #write a command that calculates the probability that a randomly\n",
        "          #selected person has is less than or equal to IQ1.\n",
        "\n",
        "prob_bet = st.norm.cdf(IQ2, 100, 15) - st.norm.cdf(IQ1, 100, 15) #write command that calculates the probability that a randomly\n",
        "           #selected person has is between IQ1 and IQ2\n",
        "\n",
        "print(\"The probability that a randomly selected person \\n has an IQ of at least \" + str(IQ1) + \" is \" + str(prob_al) + \".\")\n",
        "print(\"The probability that a randomly selected person \\n has an IQ of at least \" + str(IQ1) + \" is \" + str(prob_am) + \".\")\n",
        "print(\"The probability that a randomly selected person \\n has an IQ of between \" + str(IQ1) + \" and \" + str(IQ2)+ \" is \" + str(prob_bet) + \".\")"
      ],
      "metadata": {
        "id": "9nXguUt-ku6l"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Student's T-distribution"
      ],
      "metadata": {
        "id": "h1gf3yelkz57"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import scipy.stats as st\n",
        "import math\n",
        "# the math package is necessary because the expression for t uses the math.sqrt(x) function.\n",
        "\n",
        "n = 50 # what is the sample size?\n",
        "pop_mean = 1.86 # what is the population mean?\n",
        "sam_mean = 2.1 # what is the sample mean?\n",
        "sd = 1.57 # what is the standard deviation?\n",
        "df = 49 # what is the degrees of freedom?\n",
        "\n",
        "t =  (sam_mean - pop_mean) / (sd/math.sqrt(n)) # write an expression to find the value of t.\n",
        "\n",
        "prob = st.t.sf(t, df) # use the st.t.sf function to find the probability\n",
        "\n",
        "print(\"The probability that another 50 household sample will have a sample mean of at least 2.1 is \" + str(prob) + \".\")"
      ],
      "metadata": {
        "id": "Z3B0q_wHk50O"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Binomial Distribution"
      ],
      "metadata": {
        "id": "IpCNQfAIk8Lt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import scipy.stats as st\n",
        "from scipy.stats import binom # Load the necessary module\n",
        "\n",
        "# Get user-defined number of successes\n",
        "k = int(input())\n",
        "\n",
        "n = 100\n",
        "p = 0.5 # Set the number of trials and the probability of success in each trial\n",
        "\n",
        "# Calculate the probability of k successes given the defined n and p\n",
        "P = binom.pmf(k, n, p) # Code to calculate probability\n",
        "print(f'{P:.5E}')\n",
        "\n",
        "# Return the mean of the distribution\n",
        "mean  =  binom.stats(n, p, moments = \"m\") # Code to find mean\n",
        "print(f'{mean:.2f}')\n",
        "\n",
        "# Return the variance of the distribution\n",
        "var = binom.stats(n, p, moments = 'v') # Code to find variance\n",
        "print(f'{var:.2f}')"
      ],
      "metadata": {
        "id": "hRaWvD8zk_zu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Hypergeometric Distribution"
      ],
      "metadata": {
        "id": "fpLgCeGLlCJB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import scipy.stats as st\n",
        "from scipy.stats import hypergeom\n",
        "import matplotlib.pyplot as plt # Import the necessary module\n",
        "\n",
        "n = int(input())\n",
        "k = int(input())\n",
        "N = 52\n",
        "x = 26 # Define N and x\n",
        "\n",
        "# Calculate the probability of k successes given the defined N, x, and n\n",
        "P = hypergeom.pmf(k, N, x, n, loc=0) # Code to calculate probability\n",
        "print(f'{P:.6f}')\n",
        "\n",
        "# Calculate the cumulative probability of k or more successes\n",
        "cp = hypergeom.sf(k-1, N, x, n) # Code to calculate cumulative probability\n",
        "\n",
        "print(f'{cp:.6f}')"
      ],
      "metadata": {
        "id": "9WjmflPslEQS"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
