{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOP3HNYmB6cUJDHXDxcXPY6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sierrakneifel/Projects/blob/main/IN507_Unit4_SierraKneifel.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2oBxrlf39-qS",
        "outputId": "a1811c1c-7107-4e68-8c55-c1681a1d2554"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    age  gender   income  membership_days    product response\n",
            "0  44.0    Male      NaN              360  Product_C       No\n",
            "1  38.0  Female  73693.0              292  Product_C      Yes\n",
            "2  46.0    Male  43057.0              318  Product_D       No\n",
            "3  55.0  Female  50567.0              314  Product_A      Yes\n",
            "4  37.0    Male  94008.0              375  Product_A      Yes\n"
          ]
        }
      ],
      "source": [
        "#First, create a dataset\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import random\n",
        "\n",
        "# Set the seed for reproducibility\n",
        "np.random.seed(42)\n",
        "\n",
        "# Number of samples\n",
        "n = 1000\n",
        "\n",
        "# Generate synthetic data\n",
        "age = np.random.normal(40, 10, n).astype(int)\n",
        "gender = np.random.choice([\"Male\", \"Female\"], n)\n",
        "income = np.random.normal(70000, 20000, n).astype(int)\n",
        "membership_days = np.random.normal(365, 50, n).astype(int)\n",
        "product = np.random.choice([\"Product_A\", \"Product_B\", \"Product_C\", \"Product_D\"], n)\n",
        "response = np.random.choice([\"Yes\", \"No\"], n)\n",
        "\n",
        "# Create DataFrame\n",
        "df = pd.DataFrame({\n",
        "    'age': age,\n",
        "    'gender': gender,\n",
        "    'income': income,\n",
        "    'membership_days': membership_days,\n",
        "    'product': product,\n",
        "    'response': response\n",
        "})\n",
        "\n",
        "# Introduce missing values\n",
        "df.loc[random.sample(range(n), 100), 'age'] = np.nan\n",
        "df.loc[random.sample(range(n), 50), 'income'] = np.nan\n",
        "\n",
        "# Introduce some outliers in income\n",
        "df.loc[random.sample(range(n), 10), 'income'] = df['income'].mean() + 4 * df['income'].std()\n",
        "\n",
        "print(df.head())\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt #create a chart of missing values for features\n",
        "na_counts = df.isnull().sum().sort_values(ascending=False)\n",
        "na_counts = na_counts[na_counts > 0]\n",
        "na_counts.plot(kind='bar')\n",
        "plt.title('Missing values Bar Chart')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "RCjOqbho-GyJ",
        "outputId": "c5e4adae-7900-40ff-81bf-9444735553a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.dropna(subset=['age', 'income']) #drops all rows where either age or income are missing"
      ],
      "metadata": {
        "id": "3Qgh28wq-K6_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import zscore\n",
        "abs_z_scores = np.abs(zscore(df['income'].dropna()))\n",
        "outliers = df[abs_z_scores > 3] #calculate the Z-score for income column and print rows where score > 3\n",
        "print(outliers)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gsg9yBX3-Q52",
        "outputId": "48ef1ab3-a1fd-481e-e415-9b69c8ce8538"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      age  gender         income  membership_days    product response\n",
            "133  44.0  Female  150239.965081              395  Product_C       No\n",
            "251  49.0    Male  150239.965081              325  Product_D       No\n",
            "289  33.0    Male  150239.965081              401  Product_D       No\n",
            "294  43.0  Female  150239.965081              402  Product_C      Yes\n",
            "322  31.0    Male  150239.965081              396  Product_D      Yes\n",
            "464  38.0    Male  150239.965081              423  Product_B       No\n",
            "487  29.0    Male  150239.965081              258  Product_A       No\n",
            "550  40.0    Male  150239.965081              381  Product_D       No\n",
            "779  46.0    Male  150239.965081              403  Product_D      Yes\n",
            "907  47.0  Female  150239.965081              318  Product_C      Yes\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "sns.boxplot(x=df['income']) #creates a boxplot for the outliers"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "s2aEUK0In8eI",
        "outputId": "338dedaa-1663-485c-e371-3f82c20b4545"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='income'>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import zscore #removes outliers from income column\n",
        "abs_z_scores = np.abs(zscore(df['income']))\n",
        "df = df[(abs_z_scores < 3)]"
      ],
      "metadata": {
        "id": "hVIzJ5CWoFdP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['product'].value_counts() #shows distribution of categorical variables"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O8Xg6pgtoNxI",
        "outputId": "c5366f1c-e449-427b-981c-1b4b2a9a8643"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Product_B    230\n",
              "Product_C    220\n",
              "Product_A    205\n",
              "Product_D    191\n",
              "Name: product, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.get_dummies(df, columns=['product']) #one hot encoding for assigning 1/0 value to column\n",
        "df = pd.get_dummies(df, columns=['gender'])\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "9Q5mBD7joUK_",
        "outputId": "3193b840-3f36-45b5-97e3-37a17f438e42"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      age   income  membership_days response  product_Product_A  \\\n",
              "0    44.0      NaN              360       No                  0   \n",
              "1    38.0  73693.0              292      Yes                  0   \n",
              "2    46.0  43057.0              318       No                  0   \n",
              "3    55.0  50567.0              314      Yes                  1   \n",
              "4    37.0  94008.0              375      Yes                  1   \n",
              "..    ...      ...              ...      ...                ...   \n",
              "995  37.0  90704.0              371       No                  0   \n",
              "996  57.0  33076.0              286      Yes                  1   \n",
              "997  46.0  51409.0              324       No                  0   \n",
              "998   NaN  40069.0              361      Yes                  0   \n",
              "999  45.0  56999.0              361       No                  0   \n",
              "\n",
              "     product_Product_B  product_Product_C  product_Product_D  gender_Female  \\\n",
              "0                    0                  1                  0              0   \n",
              "1                    0                  1                  0              1   \n",
              "2                    0                  0                  1              0   \n",
              "3                    0                  0                  0              1   \n",
              "4                    0                  0                  0              0   \n",
              "..                 ...                ...                ...            ...   \n",
              "995                  0                  1                  0              1   \n",
              "996                  0                  0                  0              0   \n",
              "997                  0                  1                  0              1   \n",
              "998                  1                  0                  0              0   \n",
              "999                  0                  0                  1              0   \n",
              "\n",
              "     gender_Male  \n",
              "0              1  \n",
              "1              0  \n",
              "2              1  \n",
              "3              0  \n",
              "4              1  \n",
              "..           ...  \n",
              "995            0  \n",
              "996            1  \n",
              "997            0  \n",
              "998            1  \n",
              "999            1  \n",
              "\n",
              "[1000 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b07edcce-f5d2-4214-acab-b942b57d1d34\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>income</th>\n",
              "      <th>membership_days</th>\n",
              "      <th>response</th>\n",
              "      <th>product_Product_A</th>\n",
              "      <th>product_Product_B</th>\n",
              "      <th>product_Product_C</th>\n",
              "      <th>product_Product_D</th>\n",
              "      <th>gender_Female</th>\n",
              "      <th>gender_Male</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>44.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>360</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>38.0</td>\n",
              "      <td>73693.0</td>\n",
              "      <td>292</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>46.0</td>\n",
              "      <td>43057.0</td>\n",
              "      <td>318</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>55.0</td>\n",
              "      <td>50567.0</td>\n",
              "      <td>314</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>37.0</td>\n",
              "      <td>94008.0</td>\n",
              "      <td>375</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>37.0</td>\n",
              "      <td>90704.0</td>\n",
              "      <td>371</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>57.0</td>\n",
              "      <td>33076.0</td>\n",
              "      <td>286</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>46.0</td>\n",
              "      <td>51409.0</td>\n",
              "      <td>324</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>NaN</td>\n",
              "      <td>40069.0</td>\n",
              "      <td>361</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>45.0</td>\n",
              "      <td>56999.0</td>\n",
              "      <td>361</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000 rows × 10 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b07edcce-f5d2-4214-acab-b942b57d1d34')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b07edcce-f5d2-4214-acab-b942b57d1d34 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b07edcce-f5d2-4214-acab-b942b57d1d34');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "#feature scaling to standardize the range of ind variables or features\n",
        "scaler = StandardScaler()\n",
        "df[['age', 'income', 'membership_days']] = scaler.fit_transform(df[['age', 'income', 'membership_days']])"
      ],
      "metadata": {
        "id": "6KXgRFf4ouJX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#This dataset doesn't contain date and time features, but are common in other datasets\n",
        "#If dataset has it, this is how you handle that format\n",
        "# Convert to datetime format\n",
        "df['datetime'] = pd.to_datetime(df['datetime'])\n",
        "\n",
        "# Extract components\n",
        "df['year'] = df['datetime'].dt.year\n",
        "df['month'] = df['datetime'].dt.month\n",
        "df['day'] = df['datetime'].dt.day\n",
        "df['hour'] = df['datetime'].dt.hour"
      ],
      "metadata": {
        "id": "PS4l_d_Ao47n"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt #EDA on the dataset\n",
        "import seaborn as sns\n",
        "\n",
        "# Plotting a histogram\n",
        "df['age'].hist()\n",
        "plt.title('Distribution of Age')\n",
        "plt.xlabel('Age')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()\n",
        "\n",
        "# Plotting a scatterplot\n",
        "plt.scatter(df['age'], df['income'])\n",
        "plt.title('Age vs. Income')\n",
        "plt.xlabel('Age')\n",
        "plt.ylabel('Income')\n",
        "plt.show()\n",
        "\n",
        "# Correlation matrix\n",
        "corr = df.corr()\n",
        "sns.heatmap(corr, annot=True, cmap='coolwarm')\n",
        "plt.title('Correlation Matrix')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "7pYZrYZ9pS49"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#feature engineering by creating new features from existing ones\n",
        "#from membership days variable, create columns for new, regular and loyal customers\n",
        "df['membership_category'] = pd.cut(df['membership_days'], bins=[0, 365, 730, np.inf], labels=['New', 'Regular', 'Loyal'])"
      ],
      "metadata": {
        "id": "YATe95uTpd7X"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#since this dataset doesn't contain date and time data, the datatable library will not be of use here\n",
        "#If the dataset does contain dates and times, use this block to convert data frame from table\n",
        "from google.colab.data_table import DataTable\n",
        "import DataTable as dt\n",
        "\n",
        "# Convert pandas DataFrame to datatable Frame\n",
        "df_dt = dt.Frame(df)\n",
        "\n",
        "# Display datatable Frame\n",
        "df_dt"
      ],
      "metadata": {
        "id": "dtoUbLfmqXoR"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
